
%% This function takes the desire F and M generated by controller 
%% Generate actual F and M compute by motor model and update the motor speed state

% Input: Desire F add M; state; plant_params;
% Output: Actual F and M which can be generated by the motor model

function [F_act, M_act] = motor_model(iter, dt, ctrl, plant_params, F_des, M_des)
    global state;
	d = plant_params.arm_length;
	mixMatrix = [[ctrl.ct, ctrl.ct, ctrl.ct, ctrl.ct];
				 [0, d*ctrl.ct, 0, -d*ctrl.ct];
				 [-d*ctrl.ct, 0, d*ctrl.ct, 0];
				 [-ctrl.ms, ctrl.ms, -ctrl.ms, ctrl.ms]];

	F_M = mixMatrix * state.wSpeed(:,iter).^2;
    F_act = F_M(1);
    M_act = F_M(2:4);

	% using the Midpoint Method to update speed of the 4 propellers
	des_wSpeed = round(real(sqrt((mixMatrix \ [F_des;M_des]))));  % equal to inv(A) * b
	
	% w_dot = km * (w_des - w_cur)
	wSpeed_dot = plant_params.motor_constant .* (des_wSpeed - state.wSpeed(:,iter));
	state.wSpeed(:,iter+1) = min(max(state.wSpeed(:,iter) + wSpeed_dot*dt,plant_params.rpm_min),plant_params.rpm_max);